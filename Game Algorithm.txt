This file contians the algorithm for the main game file which links all the functions, classes defined in other files.
----------------------------------------------------------------------------------------------------------------------
ALGORITHM:

---> Create all objects of general blocks
---> Create a pointer array of type block. Assign the addresses of blocks previously created and also assign new pointers
---> create a variable 'number of players' (int)        
---> Create a pointer array of type players, of size number_of_players
---> create a variable 'current player' (int)
---> WHILE (number_of_players > 1):
    ---> WHILE (current player) < number_of_players):
        ---> IF (current player is NOT bankrupt) :
            ---> invoke the throw function 
            ---> invoke the 'start' function 
            ---> IF (current player is not eligible for rent) :
                ---> call the UNO updation function 
            ---> IF (the current block is a general one):
                --->call necessary functions
            ---> ELSE:
                ---> IF (ticket is owned by someone else AND that player is eligible for rent):
                    ---> credit the rent to the respective player.
                    ---> append it to the transactions vector of that player 
                    ---> IF (current player's balance > current rent)
                        ---> debit current rent amount from the current player's balance
                        ---> append it to the transactions vecctor of current player
                    ---> ELSE   
                        ---> call bankrupt function 
                ---> ELSE 
                    ---> generate a random boolean.
                    ---> IF (random boolean is TRUE):
                        ---> (buy the ticket)
                        ---> debit the ticket cost from current player's balance
                        ---> append this to current player's transaction vector 
                        ---> append the block number to 'positions of tickets owned' vector of current player
                        ---> IF (current ticket is colour):
                            ---> increment 'number of colour tickets' by 1
                            ---> call 'colour double rent' function
                        ---> ELSE 
                            ---> call 'white ticket double rent' function 
                ---> call the function to construct houses
        ---> ELSE:
            skip the current player by using 'continue;' statement
        ---> increment 'current player' by 1 (to loop over all players)
    ---> set 'current player' to 0. (To begin new loop)